input {
  beats {
    port => 5044
    host => "0.0.0.0"
  }
}

filter {

  fingerprint {
    source => ["message"]
    target => "[@metadata][fingerprint]"
    method => "SHA256"
  }


  # Il campo 'project' viene da Filebeat
  
  # Parsing log Apache
  if [log_type] == "access" {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG}" 
      }
    }
    
    # Parse timestamp
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
    }
    
    # Converti numeri
    mutate {
      convert => { 
        "response" => "integer" 
        "bytes" => "integer" 
      }
    }
    
    # GeoIP lookup (opzionale)
    geoip {
      source => "clientip"
      target => "geoip"
    }
    
    # User agent parsing
    useragent {
      source => "agent"
      target => "user_agent"
    }
  }
  
  # Parsing error log
  if [log_type] == "error" {
    grok {
      match => {
        "message" => "\[%{HTTPDATE:timestamp}\] \[%{LOGLEVEL:loglevel}\]( \[pid %{INT:pid}\])?( \[tid %{INT:tid}\])?( \[client %{IPORHOST:clientip}:%{INT:clientport}\])?( \[%{DATA:error_type}\])? %{GREEDYDATA:error_message}"
      }
    }
    
    # Parse timestamp for error logs
    date {
      match => [ "timestamp", "EEE MMM dd HH:mm:ss.SSSSSS yyyy" ]
      target => "@timestamp"
    }
    
    # Extract additional error details with more specific patterns
    if [error_message] {
      # Parse PHP errors
      if [error_message] =~ /PHP (?:Fatal error|Parse error|Warning|Notice|Deprecated):/ {
        grok {
          match => {
            "error_message" => "PHP %{WORD:php_error_type}: %{GREEDYDATA:php_error_detail}"
          }
          tag_on_failure => []
        }
      }
      
      # Parse SSL/TLS errors
      if [error_message] =~ /SSL|TLS|certificate/ {
        grok {
          match => {
            "error_message" => "%{GREEDYDATA:ssl_error_detail}"
          }
          tag_on_failure => []
        }
      }
      
      # Parse permission errors
      if [error_message] =~ /Permission denied|Forbidden/ {
        mutate {
          add_field => { "error_category" => "permission" }
        }
      }
      
      # Parse file not found errors
      if [error_message] =~ /File does not exist|No such file/ {
        mutate {
          add_field => { "error_category" => "file_not_found" }
        }
      }
      
      # Extract file paths from error messages
      grok {
        match => {
          "error_message" => "%{UNIXPATH:error_file_path}"
        }
        tag_on_failure => []
      }
      
      # Extract line numbers from error messages
      grok {
        match => {
          "error_message" => ".*line %{INT:error_line_number}.*"
        }
        tag_on_failure => []
      }
    }
    
    # Convert numeric fields
    mutate {
      convert => { 
        "pid" => "integer"
        "tid" => "integer" 
        "clientport" => "integer"
        "error_line_number" => "integer"
      }
      remove_field => ["timestamp"]  # Remove original timestamp field after parsing
    }
    
    # Add error severity based on log level
    if [loglevel] {
      mutate {
        add_field => { 
          "error_severity" => "%{loglevel}"
        }
      }
    }
  }
  
  # Aggiungi metadati
  mutate {
    add_field => { 
      "[@metadata][target_index]" => "apache-%{[project]}-%{+YYYY.MM.dd}"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTICSEARCH_USERNAME}"
    password => "${ELASTICSEARCH_PASSWORD}"
    index => "%{[@metadata][target_index]}"
    # SINTASSI CORRETTA per v8.x - RIMUOVI template_pattern
    manage_template => true
    template_name => "apache-logs"
    # template_pattern => "apache-*"  # RIMUOVI QUESTA RIGA
  
    #document_id => "%{[@metadata][fingerprint]}"
  }
  
  # Debug output (commenta in produzione)
  stdout { 
    codec => rubydebug {
      metadata => true
    }
  }
}
